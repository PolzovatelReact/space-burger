{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport checkResponse from \"../../utils/checkResponse/checkResponse\"; // Обработка ответа\nimport { BASE_URL } from \"../../utils/constants/constants\"; // API\n\nconst initialState = {\n  user: null,\n  email: null,\n  isLoading: false,\n  hasError: false,\n  error: null\n};\nexport const registerUser = createAsyncThunk(\"user/register\", async ({\n  email,\n  password,\n  name\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await fetch(`${BASE_URL}/auth/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password,\n        name\n      })\n    });\n    const data = await checkResponse(res); // Ответ с сервера\n    return data;\n  } catch (error) {\n    return rejectWithValue(error);\n  }\n});\nconst registerSlice = createSlice({\n  name: \"register\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(registerUser.pending, state => {\n      state.isLoading = true;\n      state.hasError = false;\n      state.error = null;\n    }).addCase(registerUser.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload.user;\n      state.email = action.payload.user.email; // Сохранение email\n    }).addCase(registerUser.rejected, (state, action) => {\n      state.isLoading = false;\n      state.hasError = true;\n      state.error = action.payload;\n    });\n  }\n});\n//export const { } = registerSlice.actions;\nexport default registerSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","checkResponse","BASE_URL","initialState","user","email","isLoading","hasError","error","registerUser","password","name","rejectWithValue","res","fetch","method","headers","body","JSON","stringify","data","registerSlice","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["D:/Yandex/step-2-sprint-1-step-2/step-2-sprint-1-step-2/src/store/slices/registerSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport checkResponse from \"../../utils/checkResponse/checkResponse\"; // Обработка ответа\r\nimport { BASE_URL } from \"../../utils/constants/constants\"; // API\r\n\r\ninterface UserState {\r\n  user: {\r\n    email: string;\r\n    name: string;\r\n  } | null;\r\n  email: string | null;\r\n  isLoading: boolean;\r\n  hasError: boolean;\r\n  error: string | null;\r\n}\r\nconst initialState: UserState = {\r\n  user: null,\r\n  email: null,\r\n  isLoading: false,\r\n  hasError: false,\r\n  error: null,\r\n};\r\nexport const registerUser = createAsyncThunk(\r\n  \"user/register\",\r\n  async (\r\n    {\r\n      email,\r\n      password,\r\n      name,\r\n    }: { email: string; password: string; name: string },\r\n    { rejectWithValue }\r\n  ) => {\r\n    try {\r\n      const res = await fetch(`${BASE_URL}/auth/register`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password, name }),\r\n      });\r\n      const data = await checkResponse(res); // Ответ с сервера\r\n      return data;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nconst registerSlice = createSlice({\r\n  name: \"register\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(registerUser.pending, (state) => {\r\n        state.isLoading = true;\r\n        state.hasError = false;\r\n        state.error = null;\r\n      })\r\n      .addCase(registerUser.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.user = action.payload.user;\r\n        state.email = action.payload.user.email; // Сохранение email\r\n      })\r\n      .addCase(registerUser.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.hasError = true;\r\n        state.error = action.payload as string;\r\n      });\r\n  },\r\n});\r\n//export const { } = registerSlice.actions;\r\nexport default registerSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,aAAa,MAAM,yCAAyC,CAAC,CAAC;AACrE,SAASC,QAAQ,QAAQ,iCAAiC,CAAC,CAAC;;AAY5D,MAAMC,YAAuB,GAAG;EAC9BC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,SAAS,EAAE,KAAK;EAChBC,QAAQ,EAAE,KAAK;EACfC,KAAK,EAAE;AACT,CAAC;AACD,OAAO,MAAMC,YAAY,GAAGT,gBAAgB,CAC1C,eAAe,EACf,OACE;EACEK,KAAK;EACLK,QAAQ;EACRC;AACiD,CAAC,EACpD;EAAEC;AAAgB,CAAC,KAChB;EACH,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGZ,QAAQ,gBAAgB,EAAE;MACnDa,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEd,KAAK;QAAEK,QAAQ;QAAEC;MAAK,CAAC;IAChD,CAAC,CAAC;IACF,MAAMS,IAAI,GAAG,MAAMnB,aAAa,CAACY,GAAG,CAAC,CAAC,CAAC;IACvC,OAAOO,IAAI;EACb,CAAC,CAAC,OAAOZ,KAAK,EAAE;IACd,OAAOI,eAAe,CAACJ,KAAK,CAAC;EAC/B;AACF,CACF,CAAC;AAED,MAAMa,aAAa,GAAGtB,WAAW,CAAC;EAChCY,IAAI,EAAE,UAAU;EAChBR,YAAY;EACZmB,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAChB,YAAY,CAACiB,OAAO,EAAGC,KAAK,IAAK;MACxCA,KAAK,CAACrB,SAAS,GAAG,IAAI;MACtBqB,KAAK,CAACpB,QAAQ,GAAG,KAAK;MACtBoB,KAAK,CAACnB,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDiB,OAAO,CAAChB,YAAY,CAACmB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAClDF,KAAK,CAACrB,SAAS,GAAG,KAAK;MACvBqB,KAAK,CAACvB,IAAI,GAAGyB,MAAM,CAACC,OAAO,CAAC1B,IAAI;MAChCuB,KAAK,CAACtB,KAAK,GAAGwB,MAAM,CAACC,OAAO,CAAC1B,IAAI,CAACC,KAAK,CAAC,CAAC;IAC3C,CAAC,CAAC,CACDoB,OAAO,CAAChB,YAAY,CAACsB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACjDF,KAAK,CAACrB,SAAS,GAAG,KAAK;MACvBqB,KAAK,CAACpB,QAAQ,GAAG,IAAI;MACrBoB,KAAK,CAACnB,KAAK,GAAGqB,MAAM,CAACC,OAAiB;IACxC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AACF;AACA,eAAeT,aAAa,CAACW,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}