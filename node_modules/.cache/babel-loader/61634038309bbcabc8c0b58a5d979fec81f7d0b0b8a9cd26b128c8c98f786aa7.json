{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { BASE_URL } from \"../../utils/constants/constants\";\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  isLoading: false,\n  hasError: false,\n  error: null\n};\n\n// **Функция логина**\nexport const loginUser = createAsyncThunk(\"user/login\", async ({\n  email,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`${BASE_URL}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      localStorage.setItem(\"accessToken\", data.accessToken);\n      localStorage.setItem(\"refreshToken\", data.refreshToken);\n      return data;\n    } else {\n      return rejectWithValue(data.message || \"Ошибка авторизации\");\n    }\n  } catch (error) {\n    return rejectWithValue(\"Ошибка авторизации\");\n  }\n});\n\n// **Функция проверки авторизации**\nexport const checkAuth = createAsyncThunk(\"user/checkAuth\", async () => {\n  const token = localStorage.getItem(\"accessToken\");\n  if (token) {\n    return {\n      isAuthenticated: true\n    };\n  }\n  return {\n    isAuthenticated: false\n  };\n});\nconst userLogin = createSlice({\n  name: \"userLogin\",\n  initialState,\n  reducers: {\n    // logoutUser: (state) => {\n    //   state.user = null;\n    //   state.isAuthenticated = false;\n    //   localStorage.removeItem(\"accessToken\");\n    //   localStorage.removeItem(\"refreshToken\");\n    // },\n  },\n  extraReducers: builder => {\n    builder.addCase(loginUser.pending, state => {\n      state.isLoading = true;\n      state.hasError = false;\n    }).addCase(loginUser.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload.user;\n      state.isAuthenticated = true;\n    }).addCase(loginUser.rejected, state => {\n      state.isLoading = false;\n      state.hasError = true;\n    }).addCase(checkAuth.fulfilled, (state, action) => {\n      state.isAuthenticated = action.payload.isAuthenticated;\n    });\n  }\n});\n\n// export const { logoutUser } = userLogin.actions;\nexport default userLogin.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","BASE_URL","initialState","user","isAuthenticated","isLoading","hasError","error","loginUser","email","password","rejectWithValue","response","fetch","method","headers","body","JSON","stringify","data","json","ok","localStorage","setItem","accessToken","refreshToken","message","checkAuth","token","getItem","userLogin","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["D:/Yandex/step-2-sprint-1-step-2/step-2-sprint-1-step-2/src/store/slices/loginSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { BASE_URL } from \"../../utils/constants/constants\";\r\n\r\ninterface LoginState {\r\n  user: { email: string; name: string } | null;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  hasError: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: LoginState = {\r\n  user: null,\r\n  isAuthenticated: false,\r\n  isLoading: false,\r\n  hasError: false,\r\n  error: null,\r\n};\r\n\r\n// **Функция логина**\r\nexport const loginUser = createAsyncThunk(\r\n  \"user/login\",\r\n  async (\r\n    { email, password }: { email: string; password: string },\r\n    { rejectWithValue }\r\n  ) => {\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/auth/login`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        localStorage.setItem(\"accessToken\", data.accessToken);\r\n        localStorage.setItem(\"refreshToken\", data.refreshToken);\r\n        return data;\r\n      } else {\r\n        return rejectWithValue(data.message || \"Ошибка авторизации\");\r\n      }\r\n    } catch (error) {\r\n      return rejectWithValue(\"Ошибка авторизации\");\r\n    }\r\n  }\r\n);\r\n\r\n// **Функция проверки авторизации**\r\nexport const checkAuth = createAsyncThunk(\"user/checkAuth\", async () => {\r\n  const token = localStorage.getItem(\"accessToken\");\r\n  if (token) {\r\n    return { isAuthenticated: true };\r\n  }\r\n  return { isAuthenticated: false };\r\n});\r\n\r\nconst userLogin = createSlice({\r\n  name: \"userLogin\",\r\n  initialState,\r\n  reducers: {\r\n    // logoutUser: (state) => {\r\n    //   state.user = null;\r\n    //   state.isAuthenticated = false;\r\n    //   localStorage.removeItem(\"accessToken\");\r\n    //   localStorage.removeItem(\"refreshToken\");\r\n    // },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loginUser.pending, (state) => {\r\n        state.isLoading = true;\r\n        state.hasError = false;\r\n      })\r\n      .addCase(loginUser.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.user = action.payload.user;\r\n        state.isAuthenticated = true;\r\n      })\r\n      .addCase(loginUser.rejected, (state) => {\r\n        state.isLoading = false;\r\n        state.hasError = true;\r\n      })\r\n      .addCase(checkAuth.fulfilled, (state, action) => {\r\n        state.isAuthenticated = action.payload.isAuthenticated;\r\n      });\r\n  },\r\n});\r\n\r\n// export const { logoutUser } = userLogin.actions;\r\nexport default userLogin.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}