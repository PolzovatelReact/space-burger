{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  isLoading: false,\n  hasError: false,\n  errorMessage: undefined,\n  data: []\n};\nconst fetchIngredients = createAsyncThunk(\"ingredients/fetchIngredients\", async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch(`https://norma.nomoreparties.space/api/ingredients`);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.data; // Предполагая, что API возвращает { data: Product[] }\n  } catch (err) {\n    if (err instanceof Error) {\n      return rejectWithValue(err.message); // Безопасный доступ к сообщению об ошибке\n    } else {\n      return rejectWithValue(\"Произошла неизвестная ошибка\");\n    }\n  }\n});\nconst ingredientsSlice = createSlice({\n  name: \"ingredients\",\n  initialState,\n  reducers: {\n    resetError: state => {\n      state.hasError = false;\n      state.errorMessage = undefined;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchIngredients.pending, state => {\n      state.isLoading = true;\n      state.hasError = false;\n      state.errorMessage = undefined;\n    }).addCase(fetchIngredients.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.data = action.payload;\n    }).addCase(fetchIngredients.rejected, (state, action) => {\n      state.isLoading = false;\n      state.hasError = true;\n      state.errorMessage = action.payload;\n    });\n  }\n});\nexport default ingredientsSlice.reducer;\n\n// export const { resetError } = ingredientsSlice.actions;\n// export default ingredientsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","isLoading","hasError","errorMessage","undefined","data","fetchIngredients","_","rejectWithValue","response","fetch","ok","Error","status","json","err","message","ingredientsSlice","name","reducers","resetError","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","reducer"],"sources":["D:/Yandex/step-2-sprint-1-step-2/step-2-sprint-1-step-2/src/store/slices/ingredientsSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { Product } from \"../../types/productTypes\";\r\n\r\ninterface IngredientsState {\r\n  isLoading: boolean;\r\n  hasError: boolean;\r\n  errorMessage?: string;\r\n  data: Product[];\r\n}\r\n\r\nconst initialState: IngredientsState = {\r\n  isLoading: false,\r\n  hasError: false,\r\n  errorMessage: undefined,\r\n  data: [],\r\n};\r\n\r\nconst fetchIngredients = createAsyncThunk(\r\n  \"ingredients/fetchIngredients\",\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://norma.nomoreparties.space/api/ingredients`\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data.data as Product[]; // Предполагая, что API возвращает { data: Product[] }\r\n    } catch (err) {\r\n      if (err instanceof Error) {\r\n        return rejectWithValue(err.message); // Безопасный доступ к сообщению об ошибке\r\n      } else {\r\n        return rejectWithValue(\"Произошла неизвестная ошибка\");\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\nconst ingredientsSlice = createSlice({\r\n  name: \"ingredients\",\r\n  initialState,\r\n  reducers: {\r\n    resetError: (state) => {\r\n      state.hasError = false;\r\n      state.errorMessage = undefined;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchIngredients.pending, (state) => {\r\n        state.isLoading = true;\r\n        state.hasError = false;\r\n        state.errorMessage = undefined;\r\n      })\r\n      .addCase(fetchIngredients.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.data = action.payload;\r\n      })\r\n      .addCase(fetchIngredients.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.hasError = true;\r\n        state.errorMessage = action.payload as string;\r\n      });\r\n  },\r\n});\r\nexport default ingredientsSlice.reducer;\r\n\r\n// export const { resetError } = ingredientsSlice.actions;\r\n// export default ingredientsSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAUhE,MAAMC,YAA8B,GAAG;EACrCC,SAAS,EAAE,KAAK;EAChBC,QAAQ,EAAE,KAAK;EACfC,YAAY,EAAEC,SAAS;EACvBC,IAAI,EAAE;AACR,CAAC;AAED,MAAMC,gBAAgB,GAAGR,gBAAgB,CACvC,8BAA8B,EAC9B,OAAOS,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAChC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,mDACF,CAAC;IACD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMR,IAAI,GAAG,MAAMI,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,OAAOT,IAAI,CAACA,IAAI,CAAc,CAAC;EACjC,CAAC,CAAC,OAAOU,GAAG,EAAE;IACZ,IAAIA,GAAG,YAAYH,KAAK,EAAE;MACxB,OAAOJ,eAAe,CAACO,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC;IACvC,CAAC,MAAM;MACL,OAAOR,eAAe,CAAC,8BAA8B,CAAC;IACxD;EACF;AACF,CACF,CAAC;AAED,MAAMS,gBAAgB,GAAGlB,WAAW,CAAC;EACnCmB,IAAI,EAAE,aAAa;EACnBlB,YAAY;EACZmB,QAAQ,EAAE;IACRC,UAAU,EAAGC,KAAK,IAAK;MACrBA,KAAK,CAACnB,QAAQ,GAAG,KAAK;MACtBmB,KAAK,CAAClB,YAAY,GAAGC,SAAS;IAChC;EACF,CAAC;EACDkB,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAClB,gBAAgB,CAACmB,OAAO,EAAGJ,KAAK,IAAK;MAC5CA,KAAK,CAACpB,SAAS,GAAG,IAAI;MACtBoB,KAAK,CAACnB,QAAQ,GAAG,KAAK;MACtBmB,KAAK,CAAClB,YAAY,GAAGC,SAAS;IAChC,CAAC,CAAC,CACDoB,OAAO,CAAClB,gBAAgB,CAACoB,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MACtDN,KAAK,CAACpB,SAAS,GAAG,KAAK;MACvBoB,KAAK,CAAChB,IAAI,GAAGsB,MAAM,CAACC,OAAO;IAC7B,CAAC,CAAC,CACDJ,OAAO,CAAClB,gBAAgB,CAACuB,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MACrDN,KAAK,CAACpB,SAAS,GAAG,KAAK;MACvBoB,KAAK,CAACnB,QAAQ,GAAG,IAAI;MACrBmB,KAAK,CAAClB,YAAY,GAAGwB,MAAM,CAACC,OAAiB;IAC/C,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AACF,eAAeX,gBAAgB,CAACa,OAAO;;AAEvC;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}